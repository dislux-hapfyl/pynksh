#!/usr/bin/env ksh
# by Roberto Rodriguez Jr <brainacid9@gmail.com>
#pnk.lang.spec;

#Globals
bg='"#222"'
datenow="#$%&*^ {datetime.datetime.now().strftime('<%m.%d.%Y.%H:%M>')}"
px='padx=2'
py='pady=2'
S=self
E=echo
#z=26th letter of roman alphabet (omega)
_=expr

#indentation
#Z=""     #0
Y="   "   #3
X="$Y$Y " #7
W="$Y$X " #11  
V="$Y$W " #15
U="$Y$V " #19

####### Head, Body & Tail #######
ZDimp() {
	typeset ii="$1"
        $E "import $ii"
}
ZDas() {
	typeset ii="$1"
	typeset aa="$2"
        $E "import $ii as $aa"
}
ZDshebang() {
	$E "#!/usr/bin/env python3"
	$E "#pnk.lang.gen;"
}
ZDfrm() {
	typeset lib="$1"
	typeset cclass="$2"
	$E "from $lib import $cclass"
}
#root window
Zztoorwin() {
	typeset pp="$1"
	ZDdc $pp Tk
	YDfd z __init__ 
	XFfc - "super().__init__"
	XFcfg '' bg=$bg
}
#class instance
XIcv() {
	typeset name="$1"
	typeset cclass="$2"
	typeset s="$3"
	XIfv z $name $cclass self,$s
}
#class define
ZDcld() {
	typeset nn="$1"
	typeset xx="$2"
	typeset pp="$3"
	ZDdc $nn Frame
	YDfd z __init__ ,parent,$xx
	XFfc - "super().__init__" parent,$pp
	XIv z master parent
	XFcfg '' bg=$bg
}
ZFmain() {
	typeset pp="$1"
	typeset windowTitle="$2"
	$E "if __name__ == '__main__':"
  	YIfv - go $pp
  	YFfc - go.title "\"$windowTitle\""
  	YFfc - go.mainloop
}

######## Define my Class #####
ZDdc() {
	typeset nn="$1" #name
	typeset cc="$2" #class
	$E "class $nn($cc):"
}

###### Define my Func #########
ZDfd() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	if [[ $z == z ]]; 
	then
		$E "def $nn(${S}$cc):"
	else
		$E "def $nn($cc):"
	fi
}
YDfd() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	if [[ $z == z ]]; 
	then
		$E "$Y def $nn(${S}$cc):"
	else
		$E "$Y def $nn($cc):"
	fi
}
XDfd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]]; 
	then
		$E "$X def $nn(${S}$cc):"
	else
		$E "$X def $nn($cc):"
	fi
}
WDfd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]]; 
	then
		$E "$W def $nn(${S}$cc):"
	else
		$E "$W def $nn($cc):"
	fi
}
ZDdefe() {
	typeset fn="$1"
	ZDfd z $fn ,e=None
}
YDret() {
	typeset r="$1"
	$E "$Y return $r"
}
YDdefs() {
	typeset fn="$1"
	typeset p="$2"
	YDfd z $fn ,$p
}
YDdefp() {
	typeset fn="$1"
	typeset p="$2"
	YDfd z $fn ,$p,e=None
}
YDdefe() {
	typeset fn="$1"
	YDfd z $fn ,e=None
}
XDret() {
	typeset r="$1"
	$E "$X return $r"
}
XDdefe() {
	typeset fn="$1"
	XDfd z $fn ,e=None
}
XDdefs() {
	typeset fn="$1"
	typeset p="$2"
	XDfd z $fn ,$p
}
WDret() {
	typeset r="$1"
	$E "$W return $r"
}
WDdefe() {
	typeset fn="$1"
	WDfd z $fn ,e=None
}
WDdefs() {
	typeset fn="$1"
	typeset p="$2"
	WDfd z $fn ,$p
}
VDret() {
	typeset r="$1"
	$E "$V return $r"
}

########## Function Ialls #######
ZFfc() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "${S}.$nn($cc)"
	elif [[ $z == zz ]];
	then
		$E "${S}.$nn(${S}.$cc)"
	elif [[ $z == -z ]];
	then
		$E "$nn(${S}.$cc)"
	else
		$E "$nn($cc)"
	fi
}
YFfc() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "$Y ${S}.$nn($cc)"
	elif [[ $z == zz ]];
	then
		$E "$Y ${S}.$nn(${S}.$cc)"
	elif [[ $z == -z ]];
	then
		$E "$Y $nn(${S}.$cc)"
	else
		$E "$Y $nn($cc)"
	fi
}
XFfc() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	if [[ $z == z ]]; 
	then
		$E "$X ${S}.$nn($cc)"
	elif [[ $z == zz ]];
	then
		$E "$X ${S}.$nn(${S}.$cc)"
	elif [[ $z == -z ]];
	then
		$E "$X $nn(${S}.$cc)"
	else
		$E "$X $nn($cc)"
	fi
}
WFfc() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	if [[ $z == z ]]; 
	then
		$E "$W ${S}.$nn($cc)"
	elif [[ $z == zz ]];
	then
		$E "$W ${S}.$nn(${S}.$cc)"
	elif [[ $z == -z ]];
	then
		$E "$W $nn(${S}.$cc)"
	else
		$E "$W $nn($cc)"
	fi
}
VFfc() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	if [[ $z == z ]]; 
	then
		$E "$V ${S}.$nn($cc)"
	elif [[ $z == zz ]];
	then
		$E "$V ${S}.$nn(${S}.$cc)"
	elif [[ $z == -z ]];
	then
		$E "$V $nn(${S}.$cc)"
	else
		$E "$V $nn($cc)"
	fi
}
UFfc() {
	typeset z="$1"
        typeset nn="$2"
	typeset cc="$3" 
	if [[ $z == z ]]; 
	then
		$E "$U ${S}.$nn($cc)"
	elif [[ $z == zz ]];
	then
		$E "$U ${S}.$nn(${S}.$cc)"
	elif [[ $z == -z ]];
	then
		$E "$U $nn(${S}.$cc)"
	else
		$E "$U $nn($cc)"
	fi
}

######## Instance of a functional value #########
ZIfv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "${S}.$nn = $cc($ff)"
	elif [[ $z == zz ]];
	then
		$E "$${S}.$nn = ${S}.$cc($ff)"
	elif [[ $z == zzz ]];
	then
		$E "$${S}.$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -zz ]];
	then
		$E "$$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -z ]];
	then
		$E "$nn = ${S}.$cc($ff)"
	else
		$E "$nn = $cc($ff)"
	fi
}
YIfv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "$Y ${S}.$nn = $cc($ff)"
	elif [[ $z == zz ]];
	then
		$E "$Y ${S}.$nn = ${S}.$cc($ff)"
	elif [[ $z == zzz ]];
	then
		$E "$Y ${S}.$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -zz ]];
	then
		$E "$Y $nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -z ]];
	then
		$E "$Y $nn = ${S}.$cc($ff)"
	else
		$E "$Y $nn = $cc($ff)"
	fi
}
XIfv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "$X ${S}.$nn = $cc($ff)"
	elif [[ $z == zz ]];
	then
		$E "$X ${S}.$nn = ${S}.$cc($ff)"
	elif [[ $z == zzz ]];
	then
		$E "$X ${S}.$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -zz ]];
	then
		$E "$X $nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -z ]];
	then
		$E "$X $nn = ${S}.$cc($ff)"
	else
		$E "$X $nn = $cc($ff)"
	fi
}
WIfv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "$W ${S}.$nn = $cc($ff)"
	elif [[ $z == zz ]];
	then
		$E "$W ${S}.$nn = ${S}.$cc($ff)"
	elif [[ $z == zzz ]];
	then
		$E "$W ${S}.$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -zz ]];
	then
		$E "$W $nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -z ]];
	then
		$E "$W $nn = ${S}.$cc($ff)"
	else
		$E "$W $nn = $cc($ff)"
	fi
}
VIfv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "$V ${S}.$nn = $cc($ff)"
	elif [[ $z == zz ]];
	then
		$E "$V ${S}.$nn = ${S}.$cc($ff)"
	elif [[ $z == zzz ]];
	then
		$E "$V ${S}.$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -zz ]];
	then
		$E "$V $nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -z ]];
	then
		$E "$V $nn = ${S}.$cc($ff)"
	else
		$E "$V $nn = $cc($ff)"
	fi
}
UIfv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	typeset ff="$4"
	if [[ $z == z ]]; 
	then
		$E "$U ${S}.$nn = $cc($ff)"
	elif [[ $z == zz ]];
	then
		$E "$U ${S}.$nn = ${S}.$cc($ff)"
	elif [[ $z == zzz ]];
	then
		$E "$U ${S}.$nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -zz ]];
	then
		$E "$U $nn = ${S}.$cc($S.$ff)"
	elif [[ $z == -z ]];
	then
		$E "$U $nn = ${S}.$cc($ff)"
	else
		$E "$U $nn = $cc($ff)"
	fi
}
# If I add another elif to replace fv then its not as clean
# This is the reason I seperate values from functional values.
# I know its all weird but fun.
######## Instance of Value #######
ZIv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "${S}.$nn = $cc"
	elif [[ $z == zz ]];
	then
		$E "${S}.$nn = ${S}.$cc"
	else
		$E "$nn = $cc"
	fi
}
YIv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$Y ${S}.$nn = $cc"
	elif [[ $z == zz ]];
	then
		$E "$Y ${S}.$nn = ${S}.$cc"
	else
		$E "$Y $nn = $cc"
	fi
}
XIv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$X ${S}.$nn = $cc"
	elif [[ $z == zz ]];
	then
		$E "$X ${S}.$nn = ${S}.$cc"
	else
		$E "$X $nn = $cc"
	fi
}
WIv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$W ${S}.$nn = $cc"
	elif [[ $z == zz ]];
	then
		$E "$W ${S}.$nn = ${S}.$cc"
	else
		$E "$W $nn = $cc"
	fi
}
VIv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$V ${S}.$nn = $cc"
	elif [[ $z == zz ]];
	then
		$E "$V ${S}.$nn = ${S}.$cc"
	else
		$E "$V $nn = $cc"
	fi
}
UIv() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$U ${S}.$nn = $cc"
	elif [[ $z == zz ]];
	then
		$E "$U ${S}.$nn = ${S}.$cc"
	else
		$E "$U $nn = $cc"
	fi
}
ZIac() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "${S}.$nn += $cc"
	elif [[ $z == zz ]];
	then
		$E "${S}.$nn += ${S}.$cc"
	else
		$E "$nn += $cc"
	fi
}
YIac() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$Y ${S}.$nn += $cc"
	elif [[ $z == zz ]];
	then
		$E "$Y ${S}.$nn += ${S}.$cc"
	else
		$E "$Y $nn += $cc"
	fi
}
XIac() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$X ${S}.$nn += $cc"
	elif [[ $z == zz ]];
	then
		$E "$X ${S}.$nn += ${S}.$cc"
	else
		$E "$X $nn += $cc"
	fi
}
WIac() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$W ${S}.$nn += $cc"
	elif [[ $z == zz ]];
	then
		$E "$W ${S}.$nn += ${S}.$cc"
	else
		$E "$W $nn += $cc"
	fi
}
VIac() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$V ${S}.$nn += $cc"
	elif [[ $z == zz ]];
	then
		$E "$V ${S}.$nn += ${S}.$cc"
	else
		$E "$V $nn += $cc"
	fi
}
UIac() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$U ${S}.$nn += $cc"
	elif [[ $z == zz ]];
	then
		$E "$U ${S}.$nn += ${S}.$cc"
	else
		$E "$U $nn += $cc"
	fi
}
ZIrd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "${S}.$nn -= $cc"
	elif [[ $z == zz ]];
	then
		$E "${S}.$nn -= ${S}.$cc"
	else
		$E "$nn -= $cc"
	fi
}
YIrd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$Y ${S}.$nn -= $cc"
	elif [[ $z == zz ]];
	then
		$E "$Y ${S}.$nn -= ${S}.$cc"
	else
		$E "$Y $nn -= $cc"
	fi
}
XIrd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$X ${S}.$nn -= $cc"
	elif [[ $z == zz ]];
	then
		$E "$X ${S}.$nn -= ${S}.$cc"
	else
		$E "$X $nn -= $cc"
	fi
}
WIrd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$W ${S}.$nn -= $cc"
	elif [[ $z == zz ]];
	then
		$E "$W ${S}.$nn -= ${S}.$cc"
	else
		$E "$W $nn -= $cc"
	fi
}
VIrd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$V ${S}.$nn -= $cc"
	elif [[ $z == zz ]];
	then
		$E "$V ${S}.$nn -= ${S}.$cc"
	else
		$E "$V $nn -= $cc"
	fi
}
UIrd() {
        typeset nn="$2"
	typeset cc="$3" 
	typeset z="$1"
	if [[ $z == z ]];
	then
		$E "$U ${S}.$nn -= $cc"
	elif [[ $z == zz ]];
	then
		$E "$U ${S}.$nn -= ${S}.$cc"
	else
		$E "$U $nn -= $cc"
	fi
}

######## Kontrol flow #########
YKtry() {
	$E "$Y try:"
}
YKexcp() {
	typeset e="$1"
	$E "$Y except $e:"
}
YKfin() {
	$E "$Y finally:"
}
XKtry() {
	$E "$X try:"
}
XKexcp() {
	typeset e="$1"
	$E "$X except $e:"
}
XKfin() {
	$E "$X finally:"
}
WKtry() {
	$E "$W try:"
}
WKexcp() {
	typeset e="$1"
	$E "$W except $e:"
}
WKfin() {
	$E "$W finally:"
}
VKtry() {
	$E "$V try:"
}
VKexcp() {
	$E "$V except Exception as e:"
}
VKfin() {
	$E "$V finally:"
}
ZKif() {
	typeset test="$1"
	$E "if ${test}:"
}
YKif() {
	typeset test="$1"
	$E "$Y if ${test}:"
}
XKif() {
	typeset test="$1"
	$E "$X if ${test}:"
}
WKif() {
	typeset test="$1"
	$E "$W if ${test}:"
}
VKif() {
	typeset test="$1"
	$E "$V if ${test}:"
}
UKif() {
	typeset test="$1"
	$E "$U if ${test}:"
}
ZKiff() {
	typeset f="$1"
	typeset fv="$2"
	$E "if ${f}({fv}):"
}
YKiff() {
	typeset test="$1"
	$E "$Y if ${f}({fv}):"
}
XKiff() {
	typeset test="$1"
	$E "$X if ${f}({fv}):"
}
WKiff() {
	typeset test="$1"
	$E "$W if ${f}({fv}):"
}
VKiff() {
	typeset test="$1"
	$E "$V if ${f}({fv}):"
}
UKiff() {
	typeset test="$1"
	$E "$U if ${f}({fv}):"
}
ZKelif() {
	typeset test="$1"
	$E "elif ${test}:"
}
YKelif() {
	typeset test="$1"
	$E "$Y elif ${test}:"
}
XKelif() {
	typeset test="$1"
	$E "$X elif ${test}:"
}
WKelif() {
	typeset test="$1"
	$E "$W elif ${test}:"
}
VKelif() {
	typeset test="$1"
	$E "$V elif ${test}:"
}
UKelif() {
	typeset test="$1"
	$E "$U elif ${test}:"
}
ZKeliff() {
	typeset test="$1"
	$E "elif ${f}({fv}):"
}
YKeliff() {
	typeset test="$1"
	$E "$Y elif ${f}({fv}):"
}
XKeliff() {
	typeset test="$1"
	$E "$X elif ${f}({fv}):"
}
WKeliff() {
	typeset test="$1"
	$E "$W elif ${f}({fv}):"
}
VKeliff() {
	typeset test="$1"
	$E "$V elif ${f}({fv}):"
}
UKeliff() {
	typeset test="$1"
	$E "$U elif ${f}({fv}):"
}
ZKelse() {
	$E "else:"
}
YKelse() {
	$E "$Y else:"
}
XKelse() {
	$E "$X else:"
}
WKelse() {
	$E "$W else:"
}
VKelse() {
	$E "$V else:"
}
UKelse() {
	$E "$U else:"
}
YKbr() {
	$E "$Y break"
}
XKbr() {
	$E "$X break"
}
WKbr() {
	$E "$W break"
}
VKbr() {
	$E "$V break"
}
UKbr() {
	$E "$U break"
}

######## Loops ######
ZLfor() {
	typeset i="$1"
	typeset l="$2"
	$E "for $i in $l:"
}
YLfor() {
	typeset i="$1"
	typeset l="$2"
	$E "$Y for $i in $l:"
}
XLfor() {
	typeset i="$1"
	typeset l="$2"
	$E "$X for $i in $l:"
}
WLfor() {
	typeset i="$1"
	typeset l="$2"
	$E "$W for $i in $l:"
}
VLfor() {
	typeset i="$1"
	typeset l="$2"
	$E "$V for $i in $l:"
}
ULfor() {
	typeset i="$1"
	typeset l="$2"
	$E "$U for $i in $l:"
}
ZLffor() {
	typeset i="$1"
	typeset l="$2"
	$E "for $i in $l():"
}
YLffor() {
	typeset i="$1"
	typeset l="$2"
	$E "$Y for $i in $l():"
}
XLffor() {
	typeset i="$1"
	typeset l="$2"
	$E "$X for $i in $l():"
}
WLffor() {
	typeset i="$1"
	typeset l="$2"
	$E "$W for $i in $l():"
}
VLffor() {
	typeset i="$1"
	typeset l="$2"
	$E "$V for $i in $l():"
}
ULffor() {
	typeset i="$1"
	typeset l="$2"
	$E "$U for $i in $l():"
}
ZLwhile() {
	typeset i="$1"
	$E "while $i:"
}
YLwhile() {
	typeset i="$1"
	$E "$Y while $i:"
}
XLwhile() {
	typeset i="$1"
	$E "$X while $i:"
}
WLwhile() {
	typeset i="$1"
	$E "$W while $i:"
}
VLwhile() {
	typeset i="$1"
	$E "$V while $i:"
}
ULwhile() {
	typeset i="$1"
	$E "$U while $i:"
}

######## widGETS ########
wfc='"#EcccA2"'
wbg='bg="#444"'
wBbg='bg="green"'
wfg='fg="#EEE"'
wcr='cursor="heart"'
wecr='cursor="spider"'
wbcr='cursor="shuttle"'
wehbg='highlightbackground="#111"'
whbg='highlightbackground="#444"'
whc="highlightcolor=$wfc"
wic="insertbackground=$wfc"
wre='relief="flat"'
wfnt='font=("Iosevka", 14)'
pnbg='bg="#111"'
Xzlbox() {
	typeset namee="$1"
	typeset w="$2"
	typeset h="$3"
	XIfv z $namee Listbox "self,$wbg,$wfg,$wecr,$whbg,$whc,$wre,$wfnt,width=$w,height=$h"
}
Xzbtn() {
	typeset namee="$1"
	typeset t="$2"
	typeset com="$3"
	XIfv z $namee Button "self,$wBbg,$wfg,$wbcr,$whbg,$whc,$wre,$wfnt,command=self.$com,text=\"$t\""
}
Xztext() {
	typeset namee="$1"
	XIfv z $namee Text "self,wrap=\"word\",insertwidth=7,undo=True,padx=20,pady=10,spacing1=3,spacing3=3,$wbg,$wfg,$wcr,$whbg,$whc,$wic,$wre,$wfnt"
}
Xzpnwin() {
	typeset namee="$1"
	typeset orient="$2"
	XIfv z $namee PanedWindow "self,orient="$orient",sashwidth=2,relief=\"flat\",showhandle=True,sashpad=1,$pnbg"
	XFpk $namee 1 both
}
Xznotebk() {
	typeset namee="$1"
	typeset exp="$2"
	typeset fill="$3"
	XIfv z $namee Notebook self
	XFpk $namee $exp $fill
}
Xzentry() {
	typeset namee="$1"
	XIfv z $namee Entry "self,$pnbg,$wfg,$wecr,$wehbg,$whc,$wic,$wre,$wfnt"
}
Xzlabel() {
	typeset thn="$1"
	typeset var="${thn}svar"
	XIfv z $var StringVar self
	XIfv z $thn Label self,textvariable=self.$var
}

##### widgets func operations and values #####
XIeget() {
	typeset w="$1"
	typeset v="$2"
	XIfv -z $v $w.get
}
XItgetln() {
	typeset w="$1"
	typeset v="$2"
	XIfv -z $v $w.get "\"insert linestart\", \"insert lineend\""
}
XItget() {
	typeset wn="$1"
	typeset ivn="$2"
	typeset s="$3"
	typeset e="$4"
	XIfv -z $ivn $wn.get "\"$s\", \"$e\""
}
XItgeta() {
	typeset w="$1"
	typeset v="$2"
	XIfv -z $v $w.get "\"1.0\", \"end\""
}
XFshsp() {
	typeset n="$1"
	typeset lntxt="$2"
	XKtry
	WIfv - result subprocess.run "$lntxt,shell=True,executable=\"/usr/bin/ksh\",stdout=subprocess.PIPE,stderr=subprocess.PIPE,text=True"
	WKif 'result.returncode == 0'
	VFtins $n end 'f"\n\n{result.stdout}\n"'
	WKelse
	VFtins $n 1.0 "f\"#$%&*^ $datenow {result.stderr}\n\""
	XKexcp 'Exception as e'
	WFtins $n 1.0 "f\"#$%&*^ $datenow {str(e)}\n\""
	
}
XFshspp() {
	typeset n="$1"
	typeset lntxt="$2"
	XKtry
	WIfv - result subprocess.run "$lntxt,shell=True,executable=\"/usr/bin/ksh\",stdout=subprocess.PIPE,stderr=subprocess.PIPE,text=True"
	WKif 'result.returncode == 0'
	VFtins $n 1.0 'f"\n\n{result.stdout}\n"'
	WKelse
	VFtins $n 1.0 "f\"#$%&*^ $datenow {result.stderr}\n\""
	XKexcp 'Exception as e'
	WFtins $n 1.0 "f\"#$%&*^ $datenow {str(e)}\n\""
	
}
XFpk() {
	typeset namep="$1"
	typeset ee="$2"
	typeset ff="$3"
	typeset aa="$4"
        XFfc z $namep.pack "expand=$ee,fill=\"$ff\",$px,$py,$aa"
}
XFpl() {
	typeset namep="$1"
	typeset x="$2"
	typeset y="$3"
        XFfc z $namep.place "x=$x,y=$y"
}
XFbind() {
	typeset n="$1"
	typeset key="$2"
	typeset yfc="$3"
	XFfc z ${n}.bind "\"<$key>\", ${S}.$yfc"
}
XFbinda() {
	typeset key="$1"
	typeset yfc="$2"
	XFfc z bind_all "\"<$key>\", ${S}.$yfc"
}
XFopft() {
	typeset wn="$1" 
	typeset file="$2"
	XIfv - f open "$file, \"r\""
	XIfv - thefile f.read
	XFtins $wn 1.0 thefile
}
XFwrtf() {
	typeset data="$1"
	typeset f="$2"
	$E "$X with open($f, \"w\") as file:"
	$E "$W file.write($data)"
}
XFset() {
	typeset c="$1"
	typeset n="$2"
	XFfc z $c.set "$n"
}
XFcfg() {
	typeset c="$1"
	typeset n="$2"
	XFfc z ${c}configure $n
}
WFtagcfg() {
	typeset wn="$1"
	typeset n="$2"
	typeset b="$3"
	typeset f="$4"
	WFfc z ${wn}.tag_configure "$n,background=$b,foreground=$f"
}
XFedel() {
	typeset n="$1"
	XFfc z $n.delete '0,"end"'
}
XFeins() {
	typeset n="$1"
	typeset v="$2"
	XFfc z $n.insert "0,$v"
}
XFtdel() {
	typeset n="$1"
	typeset ss="$2"
	typeset en="$3"
	XFfc z $n.delete "\"${ss}\",\"${en}\""
}
XFtlndel() {
	typeset n="$1"
	XFfc z $n.delete "\"insert linestart\", \"insert lineend\""
}
XFtins() {
	typeset n="$1"
	typeset s="$2"
	typeset v="$3"	
	XFfc z $n.insert "\"$s\",$v"
}
WFtins() {
	typeset n="$1"
	typeset s="$2"
	typeset v="$3"	
	WFfc z $n.insert "\"$s\",$v"
}
VFtins() {
	typeset n="$1"
	typeset s="$2"
	typeset v="$3"	
	VFfc z $n.insert "\"$s\",$v"
}
WFset() {
	typeset c="$1"
	typeset n="$2"
	WFfc z $c.set "$n"
}
WFcfg() {
	typeset c="$1"
	typeset n="$2"
	WFfc z ${c}configure $n
}
WFedel() {
	typeset n="$1"
	WFfc z $n.delete '0,"end"'
}
WFeins() {
	typeset n="$1"
	typeset v="$2"
	WFfc z $n.insert "0,f\"{$v}\""
}
WFtdel() {
	typeset n="$1"
	typeset ss="$2"
	typeset en="$3"
	WFfc z $n.delete "\"${ss}\",\"${en}\""
}
WFtlndel() {
	typeset n="$1"
	WFfc z $n.delete "\"insert linestart\", \"insert lineend\""
}
WFtins() {
	typeset n="$1"
	typeset s="$2"
	typeset v="$3"	
	WFfc z $n.insert "\"$s\",$v"
}
WFeget() {
	typeset w="$1"
	typeset v="$2"
	WIfv -z $v $w.get
}
WFtgtln() {
	typeset w="$1"
	typeset v="$2"
	WIfv -z $v $w.get "\"insert linestart\", \"insert lineend\""
}
WFtget() {
	typeset w="$1"
	typeset v="$2"
	WIfv -z $v $w.get "\"$w\", \"$v\""
}
Xzmap() {
	typeset wt=cmdText
	typeset command="$1"
	typeset pycom="$2"
	typeset args="$3"
	XKif "tt[0] == \"$pycom\""
	if [[ $args == 1 ]];
	then
		WFtins $wt end "f\"$command {tt[1]}\n\""
	elif [[ $args == 2 ]];
	then
		WFtins $wt end "f\"$command {tt[1]} {tt[2]}\n\""
	elif [[ $args == 3 ]];
	then
		WFtins $wt end "f\"$command {tt[1]} {tt[2]} {tt[3]}\n\""
	elif [[ $args == 4 ]];
	then
		WFtins $wt end "f\"$command {tt[1]} {tt[2]} {tt[3]} {tt[4]}\n\""
	else
		WFtins $wt end "f\"$command\n\""
	fi

}
